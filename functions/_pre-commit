#compdef pre-commit

# main {{{1
_pre-commit(){
  local curcontext=$curcontext state lstate line

  _arguments \
    '(- *)'{-h,--help}'[show this help message and exit]' \
    '(- *)'{-V,--version}"[show program's version number and exit]" \
    '*::pre-commit command:_pre-commit_command'
}

# _pre-commit-command {{{1
(( $+functions[_pre-commit_command] )) || _pre-commit_command() {
  local -a _pre_commit_cmds=(
    "autoupdate:Auto-update pre-commit config to the latest repos' versions."
    'clean:Clean out pre-commit files.'
    'gc:Clean unused cached repos.'
    'init-templatedir:Install hook script in a directory intended for use with `git config init.templateDir`.'
    'install:Install the pre-commit script.'
    'install-hooks:Install hook environments for all environments in the config file.'
    'migrate-config:Migrate list configuration to new map configuration.'
    'run:Run hooks.'
    'sample-config:Produce a sample .pre-commit-config.yaml file'
    'try-repo:Try the hooks in a repository, useful for developing new hooks.'
    'uninstall:Uninstall the pre-commit script.'
    'help:Show help for a specific command.'
  )

  if (( CURRENT == 1 )); then
    _describe -t commands 'pre-commit command' _pre_commit_cmds
  else
    local curcontext="$curcontext" ret=1

    cmd="${${_pre_commit_cmds[(r)$words[1]:*]%%:*}}"

    if (( $#cmd )); then
      curcontext="${curcontext%:*:*}:pre-commit-${cmd}:"

      if [ $cmd = 'help' ]; then
        _message 'no more arguments'
      elif ! _call_function ret _pre-commit-$cmd; then
	_default && ret=0
      fi
    else
      _default && ret=0
    fi
    return ret
  fi
}

# install {{{1
(( $+functions[_pre-commit-install] )) || _pre-commit-install(){
  _arguments \
    '(- *)'{-h,--help}'[show this help message and exit]' \
    --color'[Whether to use color in output. Defaults to `auto`.]: :(auto always never)' \
    {-c,--config}'[Path to alternate config file]:CONFIG:_files' \
    {-f,--overwrite}'[Overwrite existing hooks / remove migration mode.]' \
    --install-hooks'[Whether to install hook environments for all environments in the config file.]' \
    {-t,--hook-type}'[ ]:hook-type:(pre-commit pre-merge-commit pre-push prepare-commit-msg commit-msg post-checkout)' \
    --allow-missing-config'[Whether to allow a missing `pre-commit` configuration file or exit with a failure code.]' \
    && return 0
}

# run {{{1
(( $+functions[_pre-commit-run] )) || _pre-commit-run(){
  _arguments \
    '(- *)'{-h,--help}'[show this help message and exit]' \
    --color'[Whether to use color in output. Defaults to `auto`.]: :(auto always never)' \
    {-c,--config}'[Path to alternate config file]:CONFIG:_files' \
    {--verbose,-v}'[]' \
    {--all-files,-a}'[Run on all the files in the repo.]' \
    --files'[Specific filenames to run hooks on.]:file:_files' \
    --show-diff-on-failure'[When hooks fail, run `git diff` directly afterward.]' \
    --hook-stage'[The stage during which the hook is fired.]:stage:(commit merge-commit prepare-commit-msg commit-msg manual post-checkout push)' \
    {--from-ref,--source,-s}'[this option represents the original ref in a `from_ref...to_ref` diff expression.]:FROM_REF' \
    {--to-ref,--origin,-o}'[this option represents the destination ref in a `from_ref...to_ref` diff expression.]:TO_REF' \
    --commit-msg-filename'[Filename to check when running during `commit-msg`]:COMMIT_MSG_FILENAME:_files' \
    --remote-name'[Remote name used by `git push`.]:REMOTE_NAME:_files' \
    --remote-url'[Remote url used by `git push`.]:REMOTE_URL' \
    --checkout-type'[Indicates whether the checkout was a branch checkout (changing branches, flag=1) or a file checkout (retrieving a file from the index, flag=0).]:CHECKOUT_TYPE' \
    '*:hook'
}
# }}}1

# vi:fdm=marker
