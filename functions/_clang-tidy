#compdef clang-tidy

# LLVM version 19.1.7

typeset -a checks=(
  abseil-cleanup-ctad
  abseil-duration-addition
  abseil-duration-comparison
  abseil-duration-conversion-cast
  abseil-duration-division
  abseil-duration-factory-float
  abseil-duration-factory-scale
  abseil-duration-subtraction
  abseil-duration-unnecessary-conversion
  abseil-faster-strsplit-delimiter
  abseil-no-internal-dependencies
  abseil-no-namespace
  abseil-redundant-strcat-calls
  abseil-str-cat-append
  abseil-string-find-startswith
  abseil-string-find-str-contains
  abseil-time-comparison
  abseil-time-subtraction
  abseil-upgrade-duration-conversions
  altera-id-dependent-backward-branch
  altera-kernel-name-restriction
  altera-single-work-item-barrier
  altera-struct-pack-align
  altera-unroll-loops
  android-cloexec-accept
  android-cloexec-accept4
  android-cloexec-creat
  android-cloexec-dup
  android-cloexec-epoll-create
  android-cloexec-epoll-create1
  android-cloexec-fopen
  android-cloexec-inotify-init
  android-cloexec-inotify-init1
  android-cloexec-memfd-create
  android-cloexec-open
  android-cloexec-pipe
  android-cloexec-pipe2
  android-cloexec-socket
  android-comparison-in-temp-failure-retry
  boost-use-ranges
  boost-use-to-string
  bugprone-argument-comment
  bugprone-assert-side-effect
  bugprone-assignment-in-if-condition
  bugprone-bad-signal-to-kill-thread
  bugprone-bool-pointer-implicit-conversion
  bugprone-branch-clone
  bugprone-casting-through-void
  bugprone-chained-comparison
  bugprone-compare-pointer-to-member-virtual-function
  bugprone-copy-constructor-init
  bugprone-crtp-constructor-accessibility
  bugprone-dangling-handle
  bugprone-dynamic-static-initializers
  bugprone-easily-swappable-parameters
  bugprone-empty-catch
  bugprone-exception-escape
  bugprone-fold-init-type
  bugprone-forward-declaration-namespace
  bugprone-forwarding-reference-overload
  bugprone-implicit-widening-of-multiplication-result
  bugprone-inaccurate-erase
  bugprone-inc-dec-in-conditions
  bugprone-incorrect-enable-if
  bugprone-incorrect-roundings
  bugprone-infinite-loop
  bugprone-integer-division
  bugprone-lambda-function-name
  bugprone-macro-parentheses
  bugprone-macro-repeated-side-effects
  bugprone-misplaced-operator-in-strlen-in-alloc
  bugprone-misplaced-pointer-arithmetic-in-alloc
  bugprone-misplaced-widening-cast
  bugprone-move-forwarding-reference
  bugprone-multi-level-implicit-pointer-conversion
  bugprone-multiple-new-in-one-expression
  bugprone-multiple-statement-macro
  bugprone-narrowing-conversions
  bugprone-no-escape
  bugprone-non-zero-enum-to-bool-conversion
  bugprone-not-null-terminated-result
  bugprone-optional-value-conversion
  bugprone-parent-virtual-call
  bugprone-pointer-arithmetic-on-polymorphic-object
  bugprone-posix-return
  bugprone-redundant-branch-condition
  bugprone-reserved-identifier
  bugprone-return-const-ref-from-parameter
  bugprone-shared-ptr-array-mismatch
  bugprone-signal-handler
  bugprone-signed-char-misuse
  bugprone-sizeof-container
  bugprone-sizeof-expression
  bugprone-spuriously-wake-up-functions
  bugprone-standalone-empty
  bugprone-string-constructor
  bugprone-string-integer-assignment
  bugprone-string-literal-with-embedded-nul
  bugprone-stringview-nullptr
  bugprone-suspicious-enum-usage
  bugprone-suspicious-include
  bugprone-suspicious-memory-comparison
  bugprone-suspicious-memset-usage
  bugprone-suspicious-missing-comma
  bugprone-suspicious-realloc-usage
  bugprone-suspicious-semicolon
  bugprone-suspicious-string-compare
  bugprone-suspicious-stringview-data-usage
  bugprone-swapped-arguments
  bugprone-switch-missing-default-case
  bugprone-terminating-continue
  bugprone-throw-keyword-missing
  bugprone-too-small-loop-variable
  bugprone-unchecked-optional-access
  bugprone-undefined-memory-manipulation
  bugprone-undelegated-constructor
  bugprone-unhandled-exception-at-new
  bugprone-unhandled-self-assignment
  bugprone-unique-ptr-array-mismatch
  bugprone-unsafe-functions
  bugprone-unused-local-non-trivial-variable
  bugprone-unused-raii
  bugprone-unused-return-value
  bugprone-use-after-move
  bugprone-virtual-near-miss
  cert-con36-c
  cert-con54-cpp
  cert-ctr56-cpp
  cert-dcl03-c
  cert-dcl16-c
  cert-dcl37-c
  cert-dcl50-cpp
  cert-dcl51-cpp
  cert-dcl54-cpp
  cert-dcl58-cpp
  cert-dcl59-cpp
  cert-env33-c
  cert-err09-cpp
  cert-err33-c
  cert-err34-c
  cert-err52-cpp
  cert-err58-cpp
  cert-err60-cpp
  cert-err61-cpp
  cert-exp42-c
  cert-fio38-c
  cert-flp30-c
  cert-flp37-c
  cert-int09-c
  cert-mem57-cpp
  cert-msc24-c
  cert-msc30-c
  cert-msc32-c
  cert-msc33-c
  cert-msc50-cpp
  cert-msc51-cpp
  cert-msc54-cpp
  cert-oop11-cpp
  cert-oop54-cpp
  cert-oop57-cpp
  cert-oop58-cpp
  cert-pos44-c
  cert-pos47-c
  cert-sig30-c
  cert-str34-c
  clang-analyzer-apiModeling.Errno
  clang-analyzer-apiModeling.TrustNonnull
  clang-analyzer-apiModeling.TrustReturnsNonnull
  clang-analyzer-apiModeling.google.GTest
  clang-analyzer-apiModeling.llvm.CastValue
  clang-analyzer-apiModeling.llvm.ReturnValue
  clang-analyzer-core.BitwiseShift
  clang-analyzer-core.CallAndMessage
  clang-analyzer-core.CallAndMessageModeling
  clang-analyzer-core.DivideZero
  clang-analyzer-core.DynamicTypePropagation
  clang-analyzer-core.NonNullParamChecker
  clang-analyzer-core.NonnilStringConstants
  clang-analyzer-core.NullDereference
  clang-analyzer-core.StackAddrEscapeBase
  clang-analyzer-core.StackAddressEscape
  clang-analyzer-core.UndefinedBinaryOperatorResult
  clang-analyzer-core.VLASize
  clang-analyzer-core.builtin.BuiltinFunctions
  clang-analyzer-core.builtin.NoReturnFunctions
  clang-analyzer-core.uninitialized.ArraySubscript
  clang-analyzer-core.uninitialized.Assign
  clang-analyzer-core.uninitialized.Branch
  clang-analyzer-core.uninitialized.CapturedBlockVariable
  clang-analyzer-core.uninitialized.NewArraySize
  clang-analyzer-core.uninitialized.UndefReturn
  clang-analyzer-cplusplus.ArrayDelete
  clang-analyzer-cplusplus.InnerPointer
  clang-analyzer-cplusplus.Move
  clang-analyzer-cplusplus.NewDelete
  clang-analyzer-cplusplus.NewDeleteLeaks
  clang-analyzer-cplusplus.PlacementNew
  clang-analyzer-cplusplus.PureVirtualCall
  clang-analyzer-cplusplus.SelfAssignment
  clang-analyzer-cplusplus.SmartPtrModeling
  clang-analyzer-cplusplus.StringChecker
  clang-analyzer-cplusplus.VirtualCallModeling
  clang-analyzer-deadcode.DeadStores
  clang-analyzer-fuchsia.HandleChecker
  clang-analyzer-nullability.NullPassedToNonnull
  clang-analyzer-nullability.NullReturnedFromNonnull
  clang-analyzer-nullability.NullabilityBase
  clang-analyzer-nullability.NullableDereferenced
  clang-analyzer-nullability.NullablePassedToNonnull
  clang-analyzer-nullability.NullableReturnedFromNonnull
  clang-analyzer-optin.core.EnumCastOutOfRange
  clang-analyzer-optin.cplusplus.UninitializedObject
  clang-analyzer-optin.cplusplus.VirtualCall
  clang-analyzer-optin.mpi.MPI-Checker
  clang-analyzer-optin.osx.OSObjectCStyleCast
  clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker
  clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker
  clang-analyzer-optin.performance.GCDAntipattern
  clang-analyzer-optin.performance.Padding
  clang-analyzer-optin.portability.UnixAPI
  clang-analyzer-optin.taint.TaintedAlloc
  clang-analyzer-osx.API
  clang-analyzer-osx.MIG
  clang-analyzer-osx.NSOrCFErrorDerefChecker
  clang-analyzer-osx.NumberObjectConversion
  clang-analyzer-osx.OSObjectRetainCount
  clang-analyzer-osx.ObjCProperty
  clang-analyzer-osx.SecKeychainAPI
  clang-analyzer-osx.cocoa.AtSync
  clang-analyzer-osx.cocoa.AutoreleaseWrite
  clang-analyzer-osx.cocoa.ClassRelease
  clang-analyzer-osx.cocoa.Dealloc
  clang-analyzer-osx.cocoa.IncompatibleMethodTypes
  clang-analyzer-osx.cocoa.Loops
  clang-analyzer-osx.cocoa.MissingSuperCall
  clang-analyzer-osx.cocoa.NSAutoreleasePool
  clang-analyzer-osx.cocoa.NSError
  clang-analyzer-osx.cocoa.NilArg
  clang-analyzer-osx.cocoa.NonNilReturnValue
  clang-analyzer-osx.cocoa.ObjCGenerics
  clang-analyzer-osx.cocoa.RetainCount
  clang-analyzer-osx.cocoa.RetainCountBase
  clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak
  clang-analyzer-osx.cocoa.SelfInit
  clang-analyzer-osx.cocoa.SuperDealloc
  clang-analyzer-osx.cocoa.UnusedIvars
  clang-analyzer-osx.cocoa.VariadicMethodTypes
  clang-analyzer-osx.coreFoundation.CFError
  clang-analyzer-osx.coreFoundation.CFNumber
  clang-analyzer-osx.coreFoundation.CFRetainRelease
  clang-analyzer-osx.coreFoundation.containers.OutOfBounds
  clang-analyzer-osx.coreFoundation.containers.PointerSizedValues
  clang-analyzer-security.FloatLoopCounter
  clang-analyzer-security.PutenvStackArray
  clang-analyzer-security.SetgidSetuidOrder
  clang-analyzer-security.cert.env.InvalidPtr
  clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling
  clang-analyzer-security.insecureAPI.SecuritySyntaxChecker
  clang-analyzer-security.insecureAPI.UncheckedReturn
  clang-analyzer-security.insecureAPI.bcmp
  clang-analyzer-security.insecureAPI.bcopy
  clang-analyzer-security.insecureAPI.bzero
  clang-analyzer-security.insecureAPI.decodeValueOfObjCType
  clang-analyzer-security.insecureAPI.getpw
  clang-analyzer-security.insecureAPI.gets
  clang-analyzer-security.insecureAPI.mkstemp
  clang-analyzer-security.insecureAPI.mktemp
  clang-analyzer-security.insecureAPI.rand
  clang-analyzer-security.insecureAPI.strcpy
  clang-analyzer-security.insecureAPI.vfork
  clang-analyzer-unix.API
  clang-analyzer-unix.BlockInCriticalSection
  clang-analyzer-unix.DynamicMemoryModeling
  clang-analyzer-unix.Errno
  clang-analyzer-unix.Malloc
  clang-analyzer-unix.MallocSizeof
  clang-analyzer-unix.MismatchedDeallocator
  clang-analyzer-unix.StdCLibraryFunctions
  clang-analyzer-unix.Stream
  clang-analyzer-unix.Vfork
  clang-analyzer-unix.cstring.BadSizeArg
  clang-analyzer-unix.cstring.CStringModeling
  clang-analyzer-unix.cstring.NullArg
  clang-analyzer-valist.CopyToSelf
  clang-analyzer-valist.Uninitialized
  clang-analyzer-valist.Unterminated
  clang-analyzer-valist.ValistBase
  clang-analyzer-webkit.NoUncountedMemberChecker
  clang-analyzer-webkit.RefCntblBaseVirtualDtor
  clang-analyzer-webkit.UncountedLambdaCapturesChecker
  concurrency-mt-unsafe
  concurrency-thread-canceltype-asynchronous
  cppcoreguidelines-avoid-c-arrays
  cppcoreguidelines-avoid-capturing-lambda-coroutines
  cppcoreguidelines-avoid-const-or-ref-data-members
  cppcoreguidelines-avoid-do-while
  cppcoreguidelines-avoid-goto
  cppcoreguidelines-avoid-magic-numbers
  cppcoreguidelines-avoid-non-const-global-variables
  cppcoreguidelines-avoid-reference-coroutine-parameters
  cppcoreguidelines-c-copy-assignment-signature
  cppcoreguidelines-explicit-virtual-functions
  cppcoreguidelines-init-variables
  cppcoreguidelines-interfaces-global-init
  cppcoreguidelines-macro-to-enum
  cppcoreguidelines-macro-usage
  cppcoreguidelines-misleading-capture-default-by-value
  cppcoreguidelines-missing-std-forward
  cppcoreguidelines-narrowing-conversions
  cppcoreguidelines-no-malloc
  cppcoreguidelines-no-suspend-with-lock
  cppcoreguidelines-noexcept-destructor
  cppcoreguidelines-noexcept-move-operations
  cppcoreguidelines-noexcept-swap
  cppcoreguidelines-non-private-member-variables-in-classes
  cppcoreguidelines-owning-memory
  cppcoreguidelines-prefer-member-initializer
  cppcoreguidelines-pro-bounds-array-to-pointer-decay
  cppcoreguidelines-pro-bounds-constant-array-index
  cppcoreguidelines-pro-bounds-pointer-arithmetic
  cppcoreguidelines-pro-type-const-cast
  cppcoreguidelines-pro-type-cstyle-cast
  cppcoreguidelines-pro-type-member-init
  cppcoreguidelines-pro-type-reinterpret-cast
  cppcoreguidelines-pro-type-static-cast-downcast
  cppcoreguidelines-pro-type-union-access
  cppcoreguidelines-pro-type-vararg
  cppcoreguidelines-rvalue-reference-param-not-moved
  cppcoreguidelines-slicing
  cppcoreguidelines-special-member-functions
  cppcoreguidelines-use-default-member-init
  cppcoreguidelines-virtual-class-destructor
  darwin-avoid-spinlock
  darwin-dispatch-once-nonstatic
  fuchsia-default-arguments-calls
  fuchsia-default-arguments-declarations
  fuchsia-header-anon-namespaces
  fuchsia-multiple-inheritance
  fuchsia-overloaded-operator
  fuchsia-statically-constructed-objects
  fuchsia-trailing-return
  fuchsia-virtual-inheritance
  google-build-explicit-make-pair
  google-build-namespaces
  google-build-using-namespace
  google-default-arguments
  google-explicit-constructor
  google-global-names-in-headers
  google-objc-avoid-nsobject-new
  google-objc-avoid-throwing-exception
  google-objc-function-naming
  google-objc-global-variable-declaration
  google-readability-avoid-underscore-in-googletest-name
  google-readability-braces-around-statements
  google-readability-casting
  google-readability-function-size
  google-readability-namespace-comments
  google-readability-todo
  google-runtime-int
  google-runtime-operator
  google-upgrade-googletest-case
  hicpp-avoid-c-arrays
  hicpp-avoid-goto
  hicpp-braces-around-statements
  hicpp-deprecated-headers
  hicpp-exception-baseclass
  hicpp-explicit-conversions
  hicpp-function-size
  hicpp-ignored-remove-result
  hicpp-invalid-access-moved
  hicpp-member-init
  hicpp-move-const-arg
  hicpp-multiway-paths-covered
  hicpp-named-parameter
  hicpp-new-delete-operators
  hicpp-no-array-decay
  hicpp-no-assembler
  hicpp-no-malloc
  hicpp-noexcept-move
  hicpp-signed-bitwise
  hicpp-special-member-functions
  hicpp-static-assert
  hicpp-undelegated-constructor
  hicpp-uppercase-literal-suffix
  hicpp-use-auto
  hicpp-use-emplace
  hicpp-use-equals-default
  hicpp-use-equals-delete
  hicpp-use-noexcept
  hicpp-use-nullptr
  hicpp-use-override
  hicpp-vararg
  linuxkernel-must-check-errs
  llvm-else-after-return
  llvm-header-guard
  llvm-include-order
  llvm-namespace-comment
  llvm-prefer-isa-or-dyn-cast-in-conditionals
  llvm-prefer-register-over-unsigned
  llvm-qualified-auto
  llvm-twine-local
  llvmlibc-callee-namespace
  llvmlibc-implementation-in-namespace
  llvmlibc-inline-function-decl
  llvmlibc-restrict-system-libc-headers
  misc-confusable-identifiers
  misc-const-correctness
  misc-coroutine-hostile-raii
  misc-definitions-in-headers
  misc-header-include-cycle
  misc-include-cleaner
  misc-misleading-bidirectional
  misc-misleading-identifier
  misc-misplaced-const
  misc-new-delete-overloads
  misc-no-recursion
  misc-non-copyable-objects
  misc-non-private-member-variables-in-classes
  misc-redundant-expression
  misc-static-assert
  misc-throw-by-value-catch-by-reference
  misc-unconventional-assign-operator
  misc-uniqueptr-reset-release
  misc-unused-alias-decls
  misc-unused-parameters
  misc-unused-using-decls
  misc-use-anonymous-namespace
  misc-use-internal-linkage
  modernize-avoid-bind
  modernize-avoid-c-arrays
  modernize-concat-nested-namespaces
  modernize-deprecated-headers
  modernize-deprecated-ios-base-aliases
  modernize-loop-convert
  modernize-macro-to-enum
  modernize-make-shared
  modernize-make-unique
  modernize-min-max-use-initializer-list
  modernize-pass-by-value
  modernize-raw-string-literal
  modernize-redundant-void-arg
  modernize-replace-auto-ptr
  modernize-replace-disallow-copy-and-assign-macro
  modernize-replace-random-shuffle
  modernize-return-braced-init-list
  modernize-shrink-to-fit
  modernize-type-traits
  modernize-unary-static-assert
  modernize-use-auto
  modernize-use-bool-literals
  modernize-use-constraints
  modernize-use-default-member-init
  modernize-use-designated-initializers
  modernize-use-emplace
  modernize-use-equals-default
  modernize-use-equals-delete
  modernize-use-nodiscard
  modernize-use-noexcept
  modernize-use-nullptr
  modernize-use-override
  modernize-use-ranges
  modernize-use-starts-ends-with
  modernize-use-std-format
  modernize-use-std-numbers
  modernize-use-std-print
  modernize-use-trailing-return-type
  modernize-use-transparent-functors
  modernize-use-uncaught-exceptions
  modernize-use-using
  mpi-buffer-deref
  mpi-type-mismatch
  objc-assert-equals
  objc-avoid-nserror-init
  objc-dealloc-in-category
  objc-forbidden-subclassing
  objc-missing-hash
  objc-nsdate-formatter
  objc-nsinvocation-argument-lifetime
  objc-property-declaration
  objc-super-self
  openmp-exception-escape
  openmp-use-default-none
  performance-avoid-endl
  performance-enum-size
  performance-faster-string-find
  performance-for-range-copy
  performance-implicit-conversion-in-loop
  performance-inefficient-algorithm
  performance-inefficient-string-concatenation
  performance-inefficient-vector-operation
  performance-move-const-arg
  performance-move-constructor-init
  performance-no-automatic-move
  performance-no-int-to-ptr
  performance-noexcept-destructor
  performance-noexcept-move-constructor
  performance-noexcept-swap
  performance-trivially-destructible
  performance-type-promotion-in-math-fn
  performance-unnecessary-copy-initialization
  performance-unnecessary-value-param
  portability-restrict-system-includes
  portability-simd-intrinsics
  portability-std-allocator-const
  readability-avoid-const-params-in-decls
  readability-avoid-nested-conditional-operator
  readability-avoid-return-with-void-value
  readability-avoid-unconditional-preprocessor-if
  readability-braces-around-statements
  readability-const-return-type
  readability-container-contains
  readability-container-data-pointer
  readability-container-size-empty
  readability-convert-member-functions-to-static
  readability-delete-null-pointer
  readability-duplicate-include
  readability-else-after-return
  readability-enum-initial-value
  readability-function-cognitive-complexity
  readability-function-size
  readability-identifier-length
  readability-identifier-naming
  readability-implicit-bool-conversion
  readability-inconsistent-declaration-parameter-name
  readability-isolate-declaration
  readability-magic-numbers
  readability-make-member-function-const
  readability-math-missing-parentheses
  readability-misleading-indentation
  readability-misplaced-array-index
  readability-named-parameter
  readability-non-const-parameter
  readability-operators-representation
  readability-qualified-auto
  readability-redundant-access-specifiers
  readability-redundant-casting
  readability-redundant-control-flow
  readability-redundant-declaration
  readability-redundant-function-ptr-dereference
  readability-redundant-inline-specifier
  readability-redundant-member-init
  readability-redundant-preprocessor
  readability-redundant-smartptr-get
  readability-redundant-string-cstr
  readability-redundant-string-init
  readability-reference-to-constructed-temporary
  readability-simplify-boolean-expr
  readability-simplify-subscript-expr
  readability-static-accessed-through-instance
  readability-static-definition-in-anonymous-namespace
  readability-string-compare
  readability-suspicious-call-argument
  readability-uniqueptr-delete-release
  readability-uppercase-literal-suffix
  readability-use-anyofallof
  readability-use-std-min-max
  zircon-temporary-objects
)
typeset -a negchecks
for c in $checks; do
  negchecks=($negchecks "-$c")
done
unset c

typeset -a args=(
  '(- *)'{-h,--help}'[Display available options (--help-hidden for more)]'
  '(- *)'--help-hidden'[Display all available options]'
  '(- *)'--help-list'[Display list of available options (--help-list-hidden for more)]'
  '(- *)'--help-list-hidden'[Display list of all available options]'
  '(- *)'--print-all-options'[Print all option values after command line parsing]'
  '(- *)'--print-options'[Print non-default options after command line parsing]'
  '(- *)'--version'[Display the version of this program]'
  --allow-enabling-analyzer-alpha-checkers
  --checks="[Comma-separated list of globs with optional '-' prefix.]:string:_values -s, string $checks $negchecks"
  '(- --config-file)'--config='[Specifies a configuration in YAML/JSON format]:string'
  '(- --config)'--config-file='[Specify the path of .clang-tidy or custom config file]:string:_files'
  --dump-config'[Dumps configuration in the YAML format to stdout.]'
  --enable-check-profile'[Enable per-check timing profiles, and print a report to stderr.]'
  --explain-config'[For each enabled check explains, where it is enabled, i.e. in clang-tidy binary, command line or a specific configuration file.]'
  --export-fixes='[YAML file to store suggested fixes in]:filename:_files -g "*.yaml"'
  --extra-arg='[Additional argument to append to the compiler command line]:string'
  --extra-arg-before='[Additional argument to prepend to the compiler command line]:string'
  --fix'[Apply suggested fixes. Without -fix-errors clang-tidy will bail out if any compilation errors were found.]'
  --fix-errors'[Apply suggested fixes even if compilation errors were found.]'
  --fix-notes'[If a warning has no fix, but a single fix can be found through an associated diagnostic note, apply the fix]'
  --format-style='[Style for formatting code around applied fixes]:string:(none file llvm google webkit mozilla)'
  --header-filter='[Regular expression matching the names of the headers to output diagnostics from]:string'
  --line-filter='[List of files with line ranges to filter the warnings]:string'
  --list-checks'[List all enabled checks and exit.]'
  --load='[Load the specified plugin]:pluginfilename:_files'
  -p='[Build path]:string:_path_files -/'
  --quiet'[Run clang-tidy in quiet mode.]'
  --store-check-profile='[By default reports are printed in tabulated format to stderr. When this option is passed, these per-TU profiles are instead stored as JSON.]:prefix:_files -g "*.json"'
  --system-headers'[Display the errors from system headers]'
  --use-color'[Use colors in diagnostics]'
  --warnings-as-errors='[Upgrades warnings to errors.]:string:_values -s, string $checks'
  '*:file:_files -g "*.(cc|cpp|h|hpp)"'
)
_arguments "${(@)args}"

: << 'EOF'
USAGE: clang-tidy [options] <source0> [... <sourceN>]

OPTIONS:

Generic Options:

  --help                           - Display available options (--help-hidden for more)
  --help-list                      - Display list of available options (--help-list-hidden for more)
  --version                        - Display the version of this program

clang-tidy options:

  --allow-no-checks                - Allow empty enabled checks. This suppresses
                                     the "no checks enabled" error when disabling
                                     all of the checks.
  --checks=<string>                - Comma-separated list of globs with optional '-'
                                     prefix. Globs are processed in order of
                                     appearance in the list. Globs without '-'
                                     prefix add checks with matching names to the
                                     set, globs with the '-' prefix remove checks
                                     with matching names from the set of enabled
                                     checks. This option's value is appended to the
                                     value of the 'Checks' option in .clang-tidy
                                     file, if any.
  --config=<string>                - Specifies a configuration in YAML/JSON format:
                                       -config="{Checks: '*',
                                                 CheckOptions: {x: y}}"
                                     When the value is empty, clang-tidy will
                                     attempt to find a file named .clang-tidy for
                                     each source file in its parent directories.
  --config-file=<string>           - Specify the path of .clang-tidy or custom config file:
                                      e.g. --config-file=/some/path/myTidyConfigFile
                                     This option internally works exactly the same way as
                                      --config option after reading specified config file.
                                     Use either --config-file or --config, not both.
  --dump-config                    - Dumps configuration in the YAML format to
                                     stdout. This option can be used along with a
                                     file name (and '--' if the file is outside of a
                                     project with configured compilation database).
                                     The configuration used for this file will be
                                     printed.
                                     Use along with -checks=* to include
                                     configuration of all checks.
  --enable-check-profile           - Enable per-check timing profiles, and print a
                                     report to stderr.
  --enable-module-headers-parsing  - Enables preprocessor-level module header parsing
                                     for C++20 and above, empowering specific checks
                                     to detect macro definitions within modules. This
                                     feature may cause performance and parsing issues
                                     and is therefore considered experimental.
  --exclude-header-filter=<string> - Regular expression matching the names of the
                                     headers to exclude diagnostics from. Diagnostics
                                     from the main file of each translation unit are
                                     always displayed.
                                     Must be used together with --header-filter.
                                     Can be used together with -line-filter.
                                     This option overrides the 'ExcludeHeaderFilterRegex'
                                     option in .clang-tidy file, if any.
  --explain-config                 - For each enabled check explains, where it is
                                     enabled, i.e. in clang-tidy binary, command
                                     line or a specific configuration file.
  --export-fixes=<filename>        - YAML file to store suggested fixes in. The
                                     stored fixes can be applied to the input source
                                     code with clang-apply-replacements.
  --extra-arg=<string>             - Additional argument to append to the compiler command line
  --extra-arg-before=<string>      - Additional argument to prepend to the compiler command line
  --fix                            - Apply suggested fixes. Without -fix-errors
                                     clang-tidy will bail out if any compilation
                                     errors were found.
  --fix-errors                     - Apply suggested fixes even if compilation
                                     errors were found. If compiler errors have
                                     attached fix-its, clang-tidy will apply them as
                                     well.
  --fix-notes                      - If a warning has no fix, but a single fix can
                                     be found through an associated diagnostic note,
                                     apply the fix.
                                     Specifying this flag will implicitly enable the
                                     '--fix' flag.
  --format-style=<string>          - Style for formatting code around applied fixes:
                                       - 'none' (default) turns off formatting
                                       - 'file' (literally 'file', not a placeholder)
                                         uses .clang-format file in the closest parent
                                         directory
                                       - '{ <json> }' specifies options inline, e.g.
                                         -format-style='{BasedOnStyle: llvm, IndentWidth: 8}'
                                       - 'llvm', 'google', 'webkit', 'mozilla'
                                     See clang-format documentation for the up-to-date
                                     information about formatting styles and options.
                                     This option overrides the 'FormatStyle` option in
                                     .clang-tidy file, if any.
  --header-filter=<string>         - Regular expression matching the names of the
                                     headers to output diagnostics from. Diagnostics
                                     from the main file of each translation unit are
                                     always displayed.
                                     Can be used together with -line-filter.
                                     This option overrides the 'HeaderFilterRegex'
                                     option in .clang-tidy file, if any.
  --line-filter=<string>           - List of files with line ranges to filter the
                                     warnings. Can be used together with
                                     -header-filter. The format of the list is a
                                     JSON array of objects:
                                       [
                                         {"name":"file1.cpp","lines":[[1,3],[5,7]]},
                                         {"name":"file2.h"}
                                       ]
  --list-checks                    - List all enabled checks and exit. Use with
                                     -checks=* to list all available checks.
  --load=<pluginfilename>          - Load the specified plugin
  -p <string>                      - Build path
  --quiet                          - Run clang-tidy in quiet mode. This suppresses
                                     printing statistics about ignored warnings and
                                     warnings treated as errors if the respective
                                     options are specified.
  --store-check-profile=<prefix>   - By default reports are printed in tabulated
                                     format to stderr. When this option is passed,
                                     these per-TU profiles are instead stored as JSON.
  --system-headers                 - Display the errors from system headers.
                                     This option overrides the 'SystemHeaders' option
                                     in .clang-tidy file, if any.
  --use-color                      - Use colors in diagnostics. If not set, colors
                                     will be used if the terminal connected to
                                     standard output supports colors.
                                     This option overrides the 'UseColor' option in
                                     .clang-tidy file, if any.
  --verify-config                  - Check the config files to ensure each check and
                                     option is recognized.
  --vfsoverlay=<filename>          - Overlay the virtual filesystem described by file
                                     over the real file system.
  --warnings-as-errors=<string>    - Upgrades warnings to errors. Same format as
                                     '-checks'.
                                     This option's value is appended to the value of
                                     the 'WarningsAsErrors' option in .clang-tidy
                                     file, if any.

-p <build-path> is used to read a compile command database.

	For example, it can be a CMake build directory in which a file named
	compile_commands.json exists (use -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
	CMake option to get this output). When no build path is specified,
	a search for compile_commands.json will be attempted through all
	parent paths of the first input file . See:
	https://clang.llvm.org/docs/HowToSetupToolingForLLVM.html for an
	example of setting up Clang Tooling on a source tree.

<source0> ... specify the paths of source files. These paths are
	looked up in the compile command database. If the path of a file is
	absolute, it needs to point into CMake's source tree. If the path is
	relative, the current working directory needs to be in the CMake
	source tree and the file must be in a subdirectory of the current
	working directory. "./" prefixes in the relative files will be
	automatically removed, but the rest of a relative path must be a
	suffix of a path in the compile command database.


Configuration files:
  clang-tidy attempts to read configuration for each source file from a
  .clang-tidy file located in the closest parent directory of the source
  file. The .clang-tidy file is specified in YAML format. If any configuration
  options have a corresponding command-line option, command-line option takes
  precedence.

  The following configuration options may be used in a .clang-tidy file:

  CheckOptions                 - List of key-value pairs defining check-specific
                                 options. Example:
                                   CheckOptions:
                                     some-check.SomeOption: 'some value'
  Checks                       - Same as '--checks'. Additionally, the list of
                                 globs can be specified as a list instead of a
                                 string.
  ExcludeHeaderFilterRegex     - Same as '--exclude-header-filter'.
  ExtraArgs                    - Same as '--extra-args'.
  ExtraArgsBefore              - Same as '--extra-args-before'.
  FormatStyle                  - Same as '--format-style'.
  HeaderFileExtensions         - File extensions to consider to determine if a
                                 given diagnostic is located in a header file.
  HeaderFilterRegex            - Same as '--header-filter-regex'.
  ImplementationFileExtensions - File extensions to consider to determine if a
                                 given diagnostic is located in an
                                 implementation file.
  InheritParentConfig          - If this option is true in a config file, the
                                 configuration file in the parent directory
                                 (if any exists) will be taken and the current
                                 config file will be applied on top of the
                                 parent one.
  SystemHeaders                - Same as '--system-headers'.
  UseColor                     - Same as '--use-color'.
  User                         - Specifies the name or e-mail of the user
                                 running clang-tidy. This option is used, for
                                 example, to place the correct user name in
                                 TODO() comments in the relevant check.
  WarningsAsErrors             - Same as '--warnings-as-errors'.

  The effective configuration can be inspected using --dump-config:

    $ clang-tidy --dump-config
    ---
    Checks:                       '-*,some-check'
    WarningsAsErrors:             ''
    HeaderFileExtensions:         ['', 'h','hh','hpp','hxx']
    ImplementationFileExtensions: ['c','cc','cpp','cxx']
    HeaderFilterRegex:            ''
    FormatStyle:                  none
    InheritParentConfig:          true
    User:                         user
    CheckOptions:
      some-check.SomeOption: 'some value'
    ...

EOF

# vim:ft=zsh
