#compdef tlmgr

# main {{{1
_tlmgr(){
  local curcontext=$curcontext state lstate line
  _arguments \
    '(- *)'--help'[Display this help information and exit]' \
    '(- *)'--version'[Gives version information]' \
    --repository'[]:url or path' \
    --gui'[]' \
    --gui-lang'[]:llcode' \
    --debug-translation'[]' \
    --machine-readable'[]' \
    --no-execute-actions'[]' \
    --package-logfile'[]:logfile:_files' \
    --pause'[]' \
    --persistent-downloads'[]' \
    --no-persistent-downloads'[]' \
    --pin-file'[]' \
    --usermode'[]' \
    --usertree'[]:directory:_path_files -/' \
    --verify-repo='[]: :(none main all)' \
    '*::tlmgr command:_tlmgr_command'
}

# _tlmgr-command {{{1
(( $+functions[_tlmgr_command] )) || _tlmgr_command() {
  local -a _tlmgr_cmds=(
    'help:Display this help information and exit'
    'version:Gives version information'
    'backup:backup'
    'candidates:candidates'
    'check:check'
    'conf:conf'
    'dump-tlpdb:dump-tlpdb'
    'generate:generate'
    'gui:gui'
    'info:info'
    'init-usertree:init-usertree'
    'install:install'
    'key:key'
    'list:info' # synonym for info
    'option:option'
    'paper:paper'
    'path:path'
    'pinning:pinning'
    'platform:platform'
    'postaction:postaction'
    'print-platform:print-platform'
    'print-platform-info:print-platform-info'
    'remove:remove'
    'repository:repository'
    'restore:restore'
    'search:search'
    'shell:Starts an interactive mode'
    'show:info' # synonym for info
    'uninstall:remove' # synonym for remove
    'update:update'
  )

  if (( CURRENT == 1 )); then
    _describe -t commands 'tlmgr command' _tlmgr_cmds
  else
    local curcontext="$curcontext" ret=1

    cmd="${${_tlmgr_cmds[(r)$words[1]:*]%%:*}}"
    # synonym
    case $cmd in
      list|show) cmd=info ;;
      uninstall) cmd=remove ;;
    esac

    if (( $#cmd )); then
      curcontext="${curcontext%:*:*}:tlmgr-${cmd}:"

      local -a _tlmgr_cmds_wo_arg=(
        'gui'
        'help'
        'init-usertree'
        'print-platform'
        'print-platform-info'
        'shell'
        'version'
      )

      if [ -n "${_tlmgr_cmds_wo_arg[(r)$cmd]}" ]; then
        _message 'no more arguments'
      elif ! _call_function ret _tlmgr-$cmd; then
	_default && ret=0
      fi
    else
      _default && ret=0
    fi
    return ret
  fi
}

# TODO _tlmgr-backup {{{1
(( $+functions[_tlmgr-backup] )) || _tlmgr-backup(){
  _arguments \
    && return 0
}

# _tlmgr-check {{{1
(( $+functions[_tlmgr-check] )) || _tlmgr-check(){
  _arguments \
    --use-svn'[svn status]' \
    '1: :(
      all
      depends
      executes
      files
      runfiles
    )' \
      && return 0
}

# TODO _tlmgr-candidates {{{1
(( $+functions[_tlmgr-candidates] )) || _tlmgr-candidates(){
  _arguments \
    '1:pkg:' \
    && return 0
}

# TODO _tlmgr-conf {{{1
(( $+functions[_tlmgr-conf] )) || _tlmgr-conf(){
  _arguments \
    && return 0
}

# TODO _tlmgr-dump-tlpdb {{{1
(( $+functions[_tlmgr-dump-tlpdb] )) || _tlmgr-dump-tlpdb(){
  _arguments \
    '(--remote)--local[]' \
    '(--local)--remote[]' \
    --json'[]' \
    && return 0
}

# _tlmgr-generate {{{1
(( $+functions[_tlmgr-generate] )) || _tlmgr-generate(){
  _arguments \
    --dest'[]:output_file:_files' \
    --localcfg'[]:local_conf_file:_files' \
    --rebuild-sys'[]' \
    '1: :(language language.dat language.def language.dat.lua)' \
    && return 0
}

# TODO _tlmgr-info {{{1
(( $+functions[_tlmgr-info] )) || _tlmgr-info(){
  _arguments \
    --list'[]' \
    '(--only-remote)--only-installed[]' \
    '(--only-installed)--only-remote[]' \
    --data'[]: :_values -s ,
      cat-date
      cat-license
      cat-version
      category
      depends
      installed
      localrev
      longdesc
      name
      relocatable
      remoterev
      shortdesc
      size
    ' \
    --json'[]' \
    '*: pkg | collections | schemes' \
    && return 0
}

# TODO _tlmgr-install {{{1
(( $+functions[_tlmgr-install] )) || _tlmgr-install(){
  _arguments \
    --dry-run'[]' \
    --file'[]' \
    --force'[]' \
    --no-depends'[]' \
    --no-depends-at-all'[]' \
    --reinstall'[]' \
    --with-doc'[]' \
    --with-src'[]' \
    '*:pkg' \
    && return 0
}

# TODO _tlmgr-key {{{1
(( $+functions[_tlmgr-key] )) || _tlmgr-key(){
  _arguments \
    && return 0
}

# TODO _tlmgr-option {{{1
(( $+functions[_tlmgr-option] )) || _tlmgr-option(){
  _arguments \
    && return 0
}

# TODO _tlmgr-paper {{{1
(( $+functions[_tlmgr-paper] )) || _tlmgr-paper(){
  _arguments \
    && return 0
}

# TODO _tlmgr-path {{{1
(( $+functions[_tlmgr-path] )) || _tlmgr-path(){
  _arguments '1: :(add remove)' && return 0
}

# TODO _tlmgr-pinning {{{1
(( $+functions[_tlmgr-pinning] )) || _tlmgr-pinning(){
  _arguments '1: :(show add remove)' && return 0
}

# TODO _tlmgr-platform {{{1
(( $+functions[_tlmgr-platform] )) || _tlmgr-platform(){
  _arguments \
    --dry-run'[]' \
    '1: :(list add remove set)' \
    && return 0
}

# TODO _tlmgr-postaction {{{1
(( $+functions[_tlmgr-postaction] )) || _tlmgr-postaction(){
  _arguments \
    --fileassocmode'[]: :(1 2)' \
    '1: :(install remove)' \
    '2: :(shortcut fileassoc script)' \
    '*:pkg' \
    && return 0
}

# TODO _tlmgr-remove {{{1
(( $+functions[_tlmgr-remove] )) || _tlmgr-remove(){
  _arguments \
    --all'[]' \
    --backup'[]' \
    --backupdir'[]:directory:_path_files -/' \
    --dry-run'[]' \
    --force'[]' \
    --no-depends'[]' \
    --no-depends-at-all'[]' \
    '*:pkg' \
    && return 0
}

# TODO _tlmgr-repository {{{1
(( $+functions[_tlmgr-repository] )) || _tlmgr-repository(){
  _arguments \
    && return 0
}

# TODO _tlmgr-restore {{{1
(( $+functions[_tlmgr-restore] )) || _tlmgr-restore(){
  _arguments \
    '(- *)'--all'[]' \
    --backupdir'[]:directory:_path_files -/' \
    --dry-run'[]' \
    --force'[]' \
    --json'[]' \
    '1:pkg' \
    '2:revision' \
    && return 0
}

# TODO _tlmgr-search {{{1
(( $+functions[_tlmgr-search] )) || _tlmgr-search(){
  _arguments \
    '(--all)--file[]' \
    '(--file)--all[]' \
    --global'[]' \
    --word'[]' \
    '1:what' \
    && return 0
}

# TODO _tlmgr-update {{{1
(( $+functions[_tlmgr-update] )) || _tlmgr-update(){
  _arguments \
    --all'[]' \
    --backup'[]' \
    --backupdir'[]:directory:_path_files -/' \
    --dry-run'[]' \
    --exclude'[]:pkg:' \
    --force'[]' \
    --force'[]' \
    --list'[]:pkg:' \
    --no-auto-install'[]:pkg:' \
    --no-auto-remove'[]:pkg:' \
    --no-depends'[]' \
    --no-depends-at-all'[]' \
    --reinstall-forcibly-removed'[]' \
    --self'[]' \
    '*:pkg' \
    && return 0
}

# }}}1

_tlmgr "$@"

# vi:fdm=marker
