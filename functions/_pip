#compdef pip pip3 pip3.5 pip3.6 pip3.7 pip3.8 pip3.9 pip3.10

# main {{{1
_pip() {
  typeset curcontext=$curcontext state lstate line

  _arguments \
    '(- *)'{-h,--help}'[Show help]' \
    --isolated'[Run pip in an isolated mode, ignoring environment variables and user configuration.]' \
    {-v,--verbose}'[Give more output. Option is additive, and can be used up to 3 times.]' \
    '(- *)'{-V,--version}'[Show version and exit.]' \
    {-q,--quiet}'[Give less output. (WARNING logging levels).]' \
    -qq'[Give less output. (ERROR logging levels).]' \
    -qqq'[Give less output. (CRITICAL logging levels).]' \
    --log'[Path to a verbose appending log.]: :_files' \
    --proxy'[Specify a proxy in the form \[user:passwd@\]proxy.server:port.]:proxy ' \
    --retries'[Maximum number of retries each connection should attempt (default 5 times).]: ' \
    --timeout'[Set the socket timeout (default 15 seconds).]:sec' \
    --exists-action'[Default action when a path already exists]: :(s\:witch i\:gnore w\:ipe b\:ackup a\:bort)' \
    --trusted-host'[Mark this host as trusted, even though it does not have valid or any HTTPS.]:hostname:' \
    --cert'[Path to alternate CA bundle.]: :_files' \
    --client-cert'[Path to SSL client certificate, a single file containing the private key and the certificate in PEM format.]: :_files' \
    --cache-dir'[Store the cache data in <dir>.]:dir:_path_files -/' \
    --no-cache-dir'[Disable the cache.]' \
    --disable-pip-version-check"[Don't periodically check PyPI to determine whether a new version of pip is available for download. Implied with --no-index.]" \
    --no-color'[Suppress colored output]' \
    '*::pip command:_pip_command'
}

# _pip-command {{{1
(( $+functions[_pip_command] )) || _pip_command() {
  typeset -a _pip_cmds=(
    'install:Install packages.'
    'download:Download packages.'
    'uninstall:Uninstall packages.'
    'freeze:Output installed packages in requirements format.'
    'list:List installed packages.'
    'show:Show information about installed packages.'
    'check:Verify installed packages have compatible dependencies.'
    'config:Manage local and global configuration.'
    'search:Search PyPI for packages.'
    'wheel:Build wheels from your requirements.'
    'hash:Compute hashes of package archives.'
    'completion:A helper command used for command completion.'
    'help:Show help for commands.'
  )

  if (( CURRENT == 1 )); then
    _describe -t commands 'pip command' _pip_cmds
  else
    typeset curcontext="$curcontext" ret=1

    cmd="${${_pip_cmds[(r)$words[1]:*]%%:*}}"

    if (( $#cmd )); then
      curcontext="${curcontext%:*:*}:pip-${cmd}:"

      if [ $cmd = 'help' ]; then
        _message 'no more arguments'
      elif ! _call_function ret _pip-$cmd; then
	_default && ret=0
      fi
    else
      _default && ret=0
    fi
    return ret
  fi
}

# install {{{1
(( $+functions[_pip-install] )) || _pip-install() {
  _arguments \
    {-r,--requirement}'[Install from the given requirements file.]:file:_files' \
    {-c,--constraint}'[Constrain versions using the given constraints file. This option can be used multiple times.]:file:_files' \
    --no-deps"[Don't install package dependencies.]" \
    {-e,--editable}'[Install a project in editable mode (i.e. setuptools "develop mode") from a local project path or a VCS url.]:path/url:_path_files -/' \
    --user'[Install to the Python user install directory for your platform.]' \
    --root'[Install everything relative to this alternate root directory.]:dir:_path_files -/' \
    --prefix'[Installation prefix where lib, bin and other top-level folders are placed]:dir:_path_files -/' \
    {-b,--build}'[Directory to unpack packages into and build in.]:dir:_path_files -/' \
    {-U,--upgrade}'[Upgrade all specified packages to the newest available version.]' \
    --upgrade-strategy'[Determines how dependency upgrading should be handled]:upgrade_strategy:(eager only-if-needed)' \
    --force-reinstall'[Reinstall all packages even if they are already up-to-date.]' \
    '(- *)'--help'[Show help.]' \
    '*:package' \
    && return 0
}

# download {{{1
(( $+functions[_pip-download] )) || _pip-download() {
  _arguments \
    '(- *)'--help'[Show help.]' \
    && return 0
}

# uninstall {{{1
(( $+functions[_pip-uninstall] )) || _pip-uninstall() {
  _arguments \
    {-r,--requirement}'[Uninstall all the packages listed in the given requirements file.]:file:_files' \
    {-y,--yes}"[Don't ask for confirmation of uninstall deletions.]" \
    '(- *)'--help'[Show help.]' \
    '*:package' \
    && return 0
}

# freeze {{{1
(( $+functions[_pip-freeze] )) || _pip-freeze() {
  _arguments \
    {-r,--requirement}'[Use the order in the given requirements file and its comments when generating output.]:file:_files' \
    {-f,--find-links}'[URL for finding packages, which will be added to the output.]:url' \
    {-l,--local}'[If in a virtualenv that has global access, do not output globally-installed packages.]' \
    --user'[Only output packages installed in user-site.]' \
    --all'[Do not skip these packages in the output: pip, setuptools, distribute, wheel]' \
    '(- *)'--help'[Show help.]' \
    && return 0
}
# }}}1
# list {{{1
(( $+functions[_pip-list] )) || _pip-list() {
  _arguments \
    {-o,--outdated}'[List outdated packages]' \
    {-u,--uptodate}'[List uptodate packages]' \
    {-e,--editable}'[List editable projects.]' \
    {-l,--local}'[If in a virtualenv that has global access, do not list globally-installed packages.]' \
    --user'[Only output packages installed in user-site.]' \
    --format'[Select the output format]:list_format:(columns freeze json)' \
    '(- *)'--help'[Show help.]' \
    && return 0
}

# show {{{1
(( $+functions[_pip-show] )) || _pip-show() {
  _arguments \
    {-f,--files}'[Show the full list of installed files for each package.]' \
    '(- *)'--help'[Show help.]' \
    '*:package' \
    && return 0
}

# check {{{1
(( $+functions[_pip-check] )) || _pip-check() {
  _arguments \
    '(- *)'--help'[Show help.]' \
    && return 0
}

# config {{{1
(( $+functions[_pip-config] )) || _pip-config() {
  _arguments \
    '(- *)'--help'[Show help.]' \
    && return 0
}

# search {{{1
(( $+functions[_pip-search] )) || _pip-search() {
  _arguments \
    '(- *)'--help'[Show help.]' \
    && return 0
}

# wheel {{{1
(( $+functions[_pip-wheel] )) || _pip-wheel() {
  _arguments \
    '(- *)'--help'[Show help.]' \
    && return 0
}

# hash {{{1
(( $+functions[_pip-hash] )) || _pip-hash() {
  _arguments \
    '(- *)'--help'[Show help.]' \
    && return 0
}

# }}}1

# vi:fdm=marker ft=zsh
